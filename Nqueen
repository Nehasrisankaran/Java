package Backtracking;

import java.util.Arrays;
public class Nqueens {
   static int n=4;
   static void printboard(char[][] chess)
   {
	   for(int i=0;i<n;i++)
	   {
		   for(int j=0;j<n;j++)
		   {
		
			   System.out.print(chess[i][j]);
		   }
		   System.out.println();
	   }
   }
   static boolean issafe(char[][] chess,int r,int c) {
	   //col check
	  for(int i=0;i<r;i++)
	  {
		if(chess[i][c]=='Q')
			return false;
	  }
	  //row check
	  for(int i=0;i<r;i++)
	  {
		  if(chess[r][i]=='Q') return false;
	  }
	  //right diagnol check
	  for(int i=r-1, j=c-1; i>=0 && j>=0; i--, j--)
	  {
		  if(chess[i][j]=='Q')
			  return false;
	  }
	  //left diagnol
	  for(int i=r,j=c;i>=0 && j<n;i--,j++)
	  {
		  if(chess[i][j]=='Q') return false;
	  }
	  
	   return true;
   }
   
   static void nqueensolution(char[][] chess,int r)
   {
	   if(r==n)
	   {
		   printboard(chess);
		   return;
	   }
	   for(int c=0;c<n;c++)
	   {
		   if(issafe(chess,r,c))
		   {
			   chess[r][c]='Q';
			   nqueensolution(chess,r+1);
			   chess[r][c]='-';
		   }
	   }
   }
	public static void main(String[] args) {
		char chess[][]=new char[n][n];
		for(int i=0;i<n;i++)
		{
			Arrays.fill(chess[i],'-');
		}
	//	printboard(chess);
		nqueensolution(chess,0);
	}

}
